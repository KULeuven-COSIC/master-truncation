Using security parameter 40
Trying to run 64-bit computation
----------------------------------
Significant amount of unused triples of replicated Z2^64. For more accurate benchmarks, consider reducing the batch size with --batch-size.
Note that some protocols have larger minimum batch sizes.
Significant amount of unused bits of replicated Z2^64. For more accurate benchmarks, consider reducing the batch size with --batch-size.
Note that some protocols have larger minimum batch sizes.
Significant amount of unused edaBits of size 16. For more accurate benchmarks, consider reducing the batch size with --batch-size or increasing the bucket size with --bucket-size.
Significant amount of unused edaBits of size 1. For more accurate benchmarks, consider reducing the batch size with --batch-size or increasing the bucket size with --bucket-size.
Significant amount of unused edaBits of size 2. For more accurate benchmarks, consider reducing the batch size with --batch-size or increasing the bucket size with --bucket-size.
Significant amount of unused edaBits of size 8. For more accurate benchmarks, consider reducing the batch size with --batch-size or increasing the bucket size with --bucket-size.
Significant amount of unused edaBits of size 16. For more accurate benchmarks, consider reducing the batch size with --batch-size or increasing the bucket size with --bucket-size.
Significant amount of unused edaBits of size 24. For more accurate benchmarks, consider reducing the batch size with --batch-size or increasing the bucket size with --bucket-size.
Significant amount of unused triples of replicated secret. For more accurate benchmarks, consider reducing the batch size with --batch-size.
Note that some protocols have larger minimum batch sizes.
Significant amount of unused edaBits of size 15. For more accurate benchmarks, consider reducing the batch size with --batch-size or increasing the bucket size with --bucket-size.
Significant amount of unused edaBits of size 7. For more accurate benchmarks, consider reducing the batch size with --batch-size or increasing the bucket size with --bucket-size.
The following benchmarks are including preprocessing (offline phase).
Time = 2097.96 seconds 
Data sent = 35550.4 MB in ~4159256 rounds (party 0 only; use '-v' for more details)
Global data sent = 105086 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_trunc_pr = True
