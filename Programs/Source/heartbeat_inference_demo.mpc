program.use_trunc_pr = True
# program.use_edabit(True)
# program.use_split(3)

import numpy as np

sfix.set_precision(8,16)

"""
INSTRUCTIONS FOR BENCHMARK

Run Data_prep.py in ML-Data folder for data preparation

For our truncation set the -DOUR_TRUNC flag
For ABY3 online phase set the -DABY3_MAL_TRUNC flag

"""

"""
First, load the dimensions and weights from player 0
"""
weights0 = sfix.Tensor([187, 50])
weights1 = sfix.Tensor([50, 50])
weights2 = sfix.Tensor([50, 50])
weights3 = sfix.Tensor([50, 50])
weights4 = sfix.Tensor([50, 5])

w0_dim0 = sint.get_input_from(0)
w0_dim1 = sint.get_input_from(0)
weights0.input_from(0)

w1_dim0 = sint.get_input_from(0)
w1_dim1 = sint.get_input_from(0)
weights1.input_from(0)

w2_dim0 = sint.get_input_from(0)
w2_dim1 = sint.get_input_from(0)
weights2.input_from(0)

w3_dim0 = sint.get_input_from(0)
w3_dim1 = sint.get_input_from(0)
weights3.input_from(0)

w4_dim0 = sint.get_input_from(0)
w4_dim1 = sint.get_input_from(0)
weights4.input_from(0)

"""
Second, load the dimensions and biases from player 1 + truevals
"""

biases0 = sfix.Tensor([1, 50])
biases1 = sfix.Tensor([1, 50])
biases2 = sfix.Tensor([1, 50])
biases3 = sfix.Tensor([1, 50])
biases4 = sfix.Tensor([1, 5])

b0_dim0 = sint.get_input_from(1)
b0_dim1 = sint.get_input_from(1)
biases0.input_from(1)

b1_dim0 = sint.get_input_from(1)
b1_dim1 = sint.get_input_from(1)
biases1.input_from(1)

b2_dim0 = sint.get_input_from(1)
b2_dim1 = sint.get_input_from(1)
biases2.input_from(1)

b3_dim0 = sint.get_input_from(1)
b3_dim1 = sint.get_input_from(1)
biases3.input_from(1)

b4_dim0 = sint.get_input_from(1)
b4_dim1 = sint.get_input_from(1)
biases4.input_from(1)


# true_vals = sfix.Tensor([21892, 5])
# t0_dim0 = sint.get_input_from(1)
# t0_dim1 = sint.get_input_from(1)
# true_vals.input_from(1)

"""
Load input (query samples) from client
"""
# input_data = sfix.Tensor([1, 187])

# i0_dim0 = sint.get_input_from(2)
# i0_dim1 = sint.get_input_from(2)
# input_data.input_from(2)

# demo_input0 = sfix.Tensor([1, 187])
# demo_input1 = sfix.Tensor([1, 187])
# demo_input2 = sfix.Tensor([1, 187])
# demo_input0.input_from(0)
# demo_input1.input_from(1)
# demo_input2.input_from(2)
# demo_input = demo_input0 + demo_input1 + demo_input2

demo_input_test = sfix.Tensor([1, 187])
# demo_input_test.read_from_file(0, 187)[1]
start = 0
for element in demo_input_test:
    start = element.read_from_file(start)



from Compiler import ml
tf = ml

layers = [
    tf.keras.layers.Dense(50, activation='relu'),
    tf.keras.layers.Dense(50, activation='relu'),
    tf.keras.layers.Dense(50, activation='relu'),
    tf.keras.layers.Dense(50, activation='relu'),
    tf.keras.layers.Dense(5, activation='softmax')
]

model = tf.keras.models.Sequential(layers)

model.build(demo_input_test.sizes, 1)

#Update the weights and biases of each layer
model.opt.layers[0].W = weights0
model.opt.layers[1].W = weights1
model.opt.layers[2].W = weights2
model.opt.layers[3].W = weights3
model.opt.layers[4].W = weights4
model.opt.layers[0].b = biases0
model.opt.layers[1].b = biases1
model.opt.layers[2].b = biases2
model.opt.layers[3].b = biases3
model.opt.layers[4].b = biases4

guesses = model.predict(demo_input_test)

sfix.write_to_file(guesses[0])

# @for_range(len(guesses))
# def _(i):
#     sfix.write_to_file(guesses[i])




