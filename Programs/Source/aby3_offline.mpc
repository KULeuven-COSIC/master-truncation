from Compiler.GC.types import sbitvec, sbits

# SecureML mnist training - 52457214096 ~51b
# Lenet mnist training - 1048356362448 ~1t

# SecureML128 mnist training - 112619664 ~100m
# Lenet128 mnist training - 2236037328 ~2b
# Alexnet128 cifar10 training - 17561808256 ~ 17,5b


multiplications = 100000000  #100 mil
simd = 1000
n_threads = 4
ring_size = 64
trunc_size = 48


sb = sbits.get_type(simd)

n_loops = multiplications//simd

def three_subtract(a, b, c):
    return sbits.ripple_borrow_subtract(sbits.ripple_borrow_subtract(a, b), c)

@for_range_multithread(n_threads, 1, n_loops)
def _(k):
    #print_ln('Start bucket %s', k)
    a = [sb(2**simd-1 if ((15 >> i & 0x1) > 0) else 0 ) for i in range(ring_size)]
    b = [sb(2**simd-1 if ((10 >> i & 0x1) > 0) else 0 ) for i in range(ring_size)]
    c = [sb(2**simd-1 if ((4 >> i & 0x1) > 0) else 0 ) for i in range(ring_size)]

    s = [sb(2**simd-1 if ((15 >> i & 0x1) > 0) else 0 ) for i in range(trunc_size)]
    t = [sb(2**simd-1 if ((10 >> i & 0x1) > 0) else 0 ) for i in range(trunc_size)]
    u = [sb(2**simd-1 if ((4 >> i & 0x1) > 0) else 0 ) for i in range(trunc_size)]

    out = three_subtract(a, b, c)
    out = three_subtract(s, t, u)
    #print_ln('Stop bucket %s', k)

if multiplications % simd != 0:
    bucket = multiplications % simd
    sb = sbits.get_type(bucket)
    a = [sb(2**bucket-1 if ((15 >> i & 0x1) > 0) else 0 ) for i in range(ring_size)]
    b = [sb(2**bucket-1 if ((10 >> i & 0x1) > 0) else 0 ) for i in range(ring_size)]
    c = [sb(2**bucket-1 if ((4 >> i & 0x1) > 0) else 0 ) for i in range(ring_size)]

    s = [sb(2**bucket-1 if ((15 >> i & 0x1) > 0) else 0 ) for i in range(trunc_size)]
    t = [sb(2**bucket-1 if ((10 >> i & 0x1) > 0) else 0 ) for i in range(trunc_size)]
    u = [sb(2**bucket-1 if ((4 >> i & 0x1) > 0) else 0 ) for i in range(trunc_size)]

    out = three_subtract(a, b, c)
    out = three_subtract(s, t, u)
# for i in range(int(multiplications/simd)):
#     three_subtract(a,b,c)


#print_ln('ripple adder: %s, carry: %s', sbits.bit_compose([r[i].bit_decompose()[0] for i in range(32)]).reveal(), r[32].bit_decompose()[0].reveal())

